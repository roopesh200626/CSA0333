#include <stdio.h>
#define V 4
#define INF 999

int parent[V];

int find(int i) {
    while(i != parent[i])
        i = parent[i];
    return i;
}

void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskal(int cost[V][V]) {
    int min, u, v, a, b;
    for(int i = 0; i < V; i++) parent[i] = i;

    int edgeCount = 0, total = 0;

    while(edgeCount < V - 1) {
        min = INF;
        for(int i = 0; i < V; i++) {
            for(int j = 0; j < V; j++) {
                if(find(i) != find(j) && cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }
        unionSet(u, v);
        printf("Edge %d-%d = %d\n", u, v, min);
        total += min;
        edgeCount++;
    }
    printf("Total cost = %d\n", total);
}

void main() {
    int cost[V][V] = {
        {INF, 10, 6, 5},
        {10, INF, INF, 15},
        {6, INF, INF, 4},
        {5, 15, 4, INF}
    };
    kruskal(cost);
}
